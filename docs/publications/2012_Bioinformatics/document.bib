% This file was created with JabRef 2.7.2.
% Encoding: Cp1252

@INPROCEEDINGS{Bergmann06,
  author = {Bergmann, Frank T. and Sauro, Herbert M.},
  title = {{SBW - a modular framework for systems biology}},
  booktitle = {Proceedings of the 38th conference on Winter simulation},
  year = {2006},
  series = {WSC '06},
  pages = {1637--1645},
  publisher = {Winter Simulation Conference},
  abstract = {{A large number of software packages are available to assist researchers
	in systems biology. In this paper, we describe the current state
	of the Systems Biology Workbench (SBW), a modular framework that
	connects modeling and analysis applications, enabling them to reuse
	each other's capabilities. We describe how users and developers will
	perceive SBW and then focus on currently available SBW modules. The
	software, tutorial manual, and test models are freely available from
	the Computational and Systems Biology group at Keck Graduate Institute.
	Source code is available from SourceForge. The software is open source
	and licensed under BSD.}},
  citeulike-article-id = {8285276},
  citeulike-linkout-0 = {http://portal.acm.org/citation.cfm?id=1218411},
  isbn = {1-4244-0501-7},
  keywords = {plugin},
  location = {Monterey, California},
  posted-at = {2011-05-06 07:10:52},
  priority = {2},
  url = {http://portal.acm.org/citation.cfm?id=1218411}
}

@ARTICLE{Bornstein2008,
  author = {Bornstein, Benjamin J. and Keating, Sarah M. and Jouraku, Akiya and
	Hucka, Michael},
  title = {{LibSBML: an API library for SBML}},
  journal = {Bioinformatics},
  year = {2008},
  volume = {24},
  pages = {880--881},
  number = {6},
  month = {mar},
  abstract = {LibSBML is an application programming interface library for reading,
	writing, manipulating and validating content expressed in the Systems
	Biology Markup Language (SBML) format. It is written in ISO C and
	C++, provides language bindings for Common Lisp, Java, Python, Perl,
	MATLAB and Octave, and includes many features that facilitate adoption
	and use of both SBML and the library. Developers can embed libSBML
	in their applications, saving themselves the work of implementing
	their own SBML parsing, manipulation and validation software. AVAILABILITY:
	LibSBML 3 was released in August 2007. Source code, binaries and
	documentation are freely available under LGPL open-source terms from
	http://sbml.org/software/libsbml.},
  doi = {10.1093/bioinformatics/btn051},
  institution = {NASA Jet Propulsion Laboratory, Biological Network Modeling Center,
	California Institute of Technology, Pasadena, CA, USA.},
  keywords = {Algorithms; Computer Simulation; Models, Biological; Programming Languages;
	Proteome, metabolism; Signal Transduction, physiology; Software;
	Systems Biology, methods; User-Computer Interface},
  language = {eng},
  medline-pst = {ppublish},
  pii = {btn051},
  pmid = {18252737},
  url = {http://dx.doi.org/10.1093/bioinformatics/btn051}
}

@ARTICLE{Draeger2011b,
  author = {Dr\"ager, Andreas and Rodriguez, Nicolas and Dumousseau, Marine and
	D\"orr, Alexander and Wrzodek, Clemens and Le Nov\`{e}re, Nicolas
	and Zell, Andreas and Hucka, Michael},
  title = {{JSBML: a flexible Java library for working with SBML}},
  journal = {Bioinformatics},
  year = {2011},
  volume = {27},
  pages = {2167--2168},
  number = {15},
  month = jun,
  abstract = {Summary: The specifications of the Systems Biology Markup Language
	(SBML) define standards for storing and exchanging computer models
	of biological processes in text files. In order to perform model
	simulations, graphical visualizations, and other software manipulations,
	an in-memory representation of SBML is required. We developed JSBML
	for this purpose. In contrast to prior implementations of SBML APIs,
	JSBML has been designed from the ground up for the Java\texttrademark{}
	programming language, and can therefore be used on all platforms
	supported by a Java Runtime Environment. This offers important benefits
	for Java users, including the ability to distribute software as Java
	Web Start applications. JSBML supports all SBML Levels and Versions
	through Level~3 Version~1, and we have strived to maintain the highest
	possible degree of compatibility with the popular library libSBML.
	JSBML also supports modules that can facilitate the development of
	plugins for end-user applications, as well as ease migration from
	a libSBML-based backend. 
	
	Availability: Source code, binaries, and documentation for JSBML can
	be freely obtained under the terms of the LGPL 2.1 from the website
	\url{http://sbml.org/Software/JSBML}.},
  doi = {10.1093/bioinformatics/btr361},
  eprint = {http://bioinformatics.oxfordjournals.org/content/27/15/2167.full.pdf+html},
  pdf = {http://bioinformatics.oxfordjournals.org/content/27/15/2167.full.pdf},
  url = {http://bioinformatics.oxfordjournals.org/content/27/15/2167}
}

@ARTICLE{Funahashi2003,
  author = {Funahashi, Akira and Tanimura, Naoki and Morohashi, Mineo and Kitano,
	Hiroaki},
  title = {{CellDesigner: a process diagram editor for gene-regulatory and biochemical
	networks}},
  journal = {BioSilico},
  year = {2003},
  volume = {1},
  pages = {159--162},
  number = {5},
  doi = {doi:10.1016/S1478-5382(03)02370-9},
  keywords = {systems biology; SBML; SWB; process diagram editor; software Bioinformatics;
	Biotechnology; Biochemistry; Drug Discovery},
  url = {http://www.sciencedirect.com/science/article/B75GS-4BS08JD-5/2/5531c80ca62a425f55d224b8a0d3f702}
}

@ARTICLE{Hoops2006,
  author = {Hoops, Stefan and Sahle, Sven and Gauges, Ralph and Lee, Christine
	and Pahle, Jürgen and Simus, Natalia and Singhal, Mudita and Xu,
	Liang and Mendes, Pedro and Kummer, Ursula},
  title = {{COPASI--a COmplex PAthway SImulator}},
  journal = {Bioinformatics},
  year = {2006},
  volume = {22},
  pages = {3067--3074},
  number = {24},
  month = {dec},
  abstract = {Simulation and modeling is becoming a standard approach to understand
	complex biochemical processes. Therefore, there is a big need for
	software tools that allow access to diverse simulation and modeling
	methods as well as support for the usage of these methods.Here, we
	present COPASI, a platform-independent and user-friendly biochemical
	simulator that offers several unique features. We discuss numerical
	issues with these features; in particular, the criteria to switch
	between stochastic and deterministic simulation methods, hybrid deterministic-stochastic
	methods, and the importance of random number generator numerical
	resolution in stochastic simulation.The complete software is available
	in binary (executable) for MS Windows, OS X, Linux (Intel) and Sun
	Solaris (SPARC), as well as the full source code under an open source
	license from http://www.copasi.org.},
  doi = {10.1093/bioinformatics/btl485},
  institution = {Virginia Bioinformatics Institute, Virginia Tech, Washington St.
	0477, Blacksburg, VA 24061, USA.},
  keywords = {Algorithms; Computer Graphics; Computer Simulation; Models, Biological;
	Programming Languages; Protein Interaction Mapping, methods; Proteome,
	metabolism; Signal Transduction, physiology; Software; User-Computer
	Interface},
  language = {eng},
  medline-pst = {ppublish},
  pii = {btl485},
  pmid = {17032683},
  url = {http://dx.doi.org/10.1093/bioinformatics/btl485}
}

@TECHREPORT{Hucka2003,
  author = {Hucka, Michael and Finney, Andrew and Sauro, Herbert and Bolouri,
	Hamid},
  title = {{Systems Biology Markup Language (SBML) Level 1: Structures and Facilities
	for Basic Model Definitions}},
  institution = {Systems Biology Workbench Development Group JST ERATO Kitano Symbiotic
	Systems Project Control and Dynamical Systems, MC 107-81, California
	Institute of Technology},
  year = {2003},
  number = {2},
  address = {Pasadena, CA, USA},
  month = aug,
  abstract = {We present the Systems Biology Markup Language (SBML) Level 1, Version
	2, a description language for simulations in systems biology. SBML
	is oriented towards representing biochemical networks common in research
	on a number of topics, including cell signaling pathways, metabolic
	pathways, biochemical reactions, gene regulation, and many others.
	A recent conference (Kitano, 2001) highlights the range of topics
	that fall under the umbrella of systems biology and are in the domain
	of the description language defined here. Many contemporary research
	initiatives demonstrate the growing popularity of this kind of multidisciplinary
	work (e.g., Abbott, 1999; Gilman, 2000; Popel and Winslow, 1998;
	Smaglik, 2000a,b). SBML Level 1 is the result of merging modeling-language
	features from the following simulation systems: BioSpice (Arkin,
	2001), DBSolve (Goryanin, 2001; Goryanin et al., 1999), E-Cell (Tomita
	et al., 1999, 2001), Gepasi (Mendes, 1997, 2001), Jarnac (Sauro,
	2000; Sauro and Fell, 1991), StochSim (Bray et al., 2001; Morton-Firth
	and Bray, 1998), and Virtual Cell (Schaff et al., 2000, 2001). SBML
	was developed with the help of the authors of these packages. As
	a result of being based on actual working simulation software, it
	is a practical and functional description language. Our goal in creating
	it has been to provide an open standard that will enable simulation
	software to exchange models, something that is currently impossible
	because there is no standard model exchange language. We expect SBML
	models to be encoded using XML, the eXtensible Markup Language (Bosak
	and Bray, 1999; Bray et al., 1998), and we include here an XML Schema
	that defines SBML Level 1.}
}

@MANUAL{Kotcon2011,
  title = {{Final Report for Community of Ordinary Differential Equations Educators}},
  author = {Kotcon, Beky and Mesuro, Samantha and Rozenfeld, Daniel and Yodpinyanee,
	Anak},
  organization = {Harvey Mudd College Joint Computer Science and Mathematics Clinic},
  address = {301 Platt Boulevard, Claremont, CA 91711},
  month = apr,
  year = {2011},
  abstract = {This document details our redesign and refactoring of ODE Toolkit
	for the CODEE 2008-09 Computer Science/Mathematics Clinic. We outline
	the project as it stood when we found it, describing the architecture,
	giving a description of important classes, and explaining our decision
	to focus on refactoring the code. We then detail our work, including
	summaries of our new design, major classes, the motivations behind
	our decisions, documentation, improvements we made to the code, end
	results, and other deliverables.},
  url = {http://www.math.hmc.edu/clinic/projects/2010/}
}

@INPROCEEDINGS{Kron10EvA2,
  author = {Kronfeld, Marcel and Planatscher, Hannes and Zell, Andreas},
  title = {The {EvA2} Optimization Framework},
  booktitle = {Learning and Intelligent Optimization Conference, Special Session
	on Software for Optimization (LION-SWOP)},
  year = {2010},
  editor = {Blum, Christian and Battiti, Roberto},
  number = {6073},
  series = {Lecture Notes in Computer Science, LNCS},
  pages = {247-250},
  address = {Venice, Italy},
  month = jan,
  publisher = {Springer Verlag},
  abstract = {We present EvA2, a comprehensive metaheuristic optimization framework
	with emphasis on Evolutionary Algorithms implemented in Java. It
	presents a modular structure of interfaces and abstract classes for
	the implementation of optimization problems. End users may choose
	among several layers of abstraction for an entrance point meeting
	their requirements on both ease of use and access to extensive functionality.
	The EvA2 framework has been applied successfully in several academic
	as well as industrial cooperations and is extended continuously.
	It is freely available under an open source license (LGPL).},
  url = {http://www.cogsys.cs.uni-tuebingen.de/publikationen/2010/Kron10EvA2Short.pdf}
}

@ARTICLE{Novere2006a,
  author = {Le Nov{\`e}re, Nicolas and Bornstein, Benjamin J. and Broicher, Alexander
	and Courtot, M{\'e}lanie and Donizelli, Marco and Dharuri, Harish
	and Li, Lu and Sauro, Herbert and Schilstra, Maria and Shapiro, Bruce
	and Snoep, Jacky L. and Hucka, Michael},
  title = {{BioModels Database: a free, centralized database of curated, published,
	quantitative kinetic models of biochemical and cellular systems}},
  journal = {Nucleic Acids Research},
  year = {2006},
  volume = {34},
  pages = {D689--D691},
  abstract = {BioModels Database (http://www.ebi.ac.uk/biomodels/), part of the
	international initiative BioModels.net, provides access to published,
	peerreviewed, quantitative models of biochemical and cellular systems.
	Each model is carefully curated to verify that it corresponds to
	the reference publication and gives the proper numerical results.
	Curators also annotate the components of the models with terms from
	controlled vocabularies and links to other relevant data resources.
	This allows the users to search accurately for the models they need.
	The models can currently be retrieved in the SBML format, and import/export
	facilities are being developed to extend the spectrum of formats
	supported by the resource.},
  doi = {doi:10.1093/nar/gkj092},
  publisher = {Oxford Univ Press},
  url = {http://nar.oxfordjournals.org/cgi/content/full/34/suppl_1/D689}
}

@ARTICLE{Lloyd2004,
  author = {Lloyd, Catherine M. and Halstead, Matt D. B. and Nielsen, Poul F.},
  title = {{CellML: its future, present and past}},
  journal = {Prog Biophys Mol Biol},
  year = {2004},
  volume = {85},
  pages = {433--450},
  number = {2-3},
  abstract = {Advances in biotechnology and experimental techniques have lead to
	the elucidation of vast amounts of biological data. Mathematical
	models provide a method of analysing this data; however, there are
	two issues that need to be addressed: (1) the need for standards
	for defining cell models so they can, for example, be exchanged across
	the World Wide Web, and also read into simulation software in a consistent
	format and (2) eliminating the errors which arise with the current
	method of model publication. CellML has evolved to meet these needs
	of the modelling community. CellML is a free, open-source, eXtensible
	markup language based standard for defining mathematical models of
	cellular function. In this paper we summarise the structure of CellML,
	its current applications (including biological pathway and electrophysiological
	models), and its future development--in particular, the development
	of toolsets and the integration of ontologies.},
  doi = {10.1016/j.pbiomolbio.2004.01.004},
  keywords = {Algorithms; Animals; Cell Physiological Phenomena; Computer Simulation;
	Humans; Hypermedia; Information Storage and Retrieval; Models, Biological;
	Programming Languages; Software},
  pii = {S007961070400015X},
  pmid = {15142756},
  url = {http://dx.doi.org/10.1016/j.pbiomolbio.2004.01.004}
}

@ARTICLE{Loew2001,
  author = {Loew, L. M. and Schaff, J. C.},
  title = {{The Virtual Cell: a software environment for computational cell
	biology}},
  journal = {Trends Biotechnol},
  year = {2001},
  volume = {19},
  pages = {401--406},
  number = {10},
  month = {oct},
  abstract = {The newly emerging field of computational cell biology requires software
	tools that address the needs of a broad community of scientists.
	Cell biological processes are controlled by an interacting set of
	biochemical and electrophysiological events that are distributed
	within complex cellular structures. Computational modeling is familiar
	to researchers in fields such as molecular structure, neurobiology
	and metabolic pathway engineering, and is rapidly emerging in the
	area of gene expression. Although some of these established modeling
	approaches can be adapted to address problems of interest to cell
	biologists, relatively few software development efforts have been
	directed at the field as a whole. The Virtual Cell is a computational
	environment designed for cell biologists as well as for mathematical
	biologists and bioengineers. It serves to aid the construction of
	cell biological models and the generation of simulations from them.
	The system enables the formulation of both compartmental and spatial
	models, the latter with either idealized or experimentally derived
	geometries of one, two or three dimensions.},
  institution = {Center for Biomedical Imaging Technology, Department of Physiology,
	University of Connecticut Health Center, Farmington, Connecticut
	06030, USA. les@volt.uchc.edu},
  keywords = {Biology, trends; Cell Biology, trends; Computer Simulation; Models,
	Biological; Software},
  language = {eng},
  medline-pst = {ppublish},
  pii = {S0167779901017401},
  pmid = {11587765}
}

@ARTICLE{Machne2006,
  author = {Machn\'e, Rainer and Finney, Andrew and M\"uller, Stefan and Lu,
	James and Widder, Stefanie and Flamm, Christoph},
  title = {{The SBML ODE Solver Library: a native API for symbolic and fast
	numerical analysis of reaction networks}},
  journal = {Bioinformatics},
  year = {2006},
  volume = {22},
  pages = {1406--1407},
  number = {11},
  month = jun,
  abstract = {The SBML ODE Solver Library (SOSlib) is a programming library for
	symbolic and numerical analysis of chemical reaction network models
	encoded in the Systems Biology Markup Language (SBML). It is written
	in ISO C and distributed under the open source LGPL license. The
	package employs libSBML structures for formula representation and
	associated functions to construct a system of ordinary differential
	equations, their Jacobian matrix and other derivatives. SUNDIALS'
	CVODES is incorporated for numerical integration and sensitivity
	analysis. Preliminary benchmarking results give a rough overview
	on the behavior of different tools and are discussed in the Supplementary
	Material. The native application program interface provides fine-grained
	interfaces to all internal data structures, symbolic operations and
	numerical routines, enabling the construction of very efficient analytic
	applications and hybrid or multi-scale solvers with interfaces to
	SBML and non SBML data sources. Optional modules based on XMGrace
	and Graphviz allow quick inspection of structure and dynamics.},
  doi = {10.1093/bioinformatics/btl086},
  institution = {Institute for Theoretical Chemistry, University of Vienna, 1090 Vienna,
	Austria.},
  keywords = {Algorithms; Computational Biology, methods; Computer Simulation; Computers;
	Gene Library; Models, Biological; Models, Theoretical; Programming
	Languages; Software Design; Systems Biology},
  language = {eng},
  medline-pst = {ppublish},
  pii = {btl086},
  pmid = {16527832},
  url = {http://dx.doi.org/10.1093/bioinformatics/btl086}
}

@ARTICLE{Maiwald2008,
  author = {Maiwald, Thomas and Timmer, Jens},
  title = {{Dynamical modeling and multi-experiment fitting with PottersWheel}},
  journal = {Bioinformatics},
  year = {2008},
  volume = {24},
  pages = {2037--2043},
  number = {18},
  month = {sep},
  abstract = {Modelers in Systems Biology need a flexible framework that allows
	them to easily create new dynamic models, investigate their properties
	and fit several experimental datasets simultaneously. Multi-experiment-fitting
	is a powerful approach to estimate parameter values, to check the
	validity of a given model, and to discriminate competing model hypotheses.
	It requires high-performance integration of ordinary differential
	equations and robust optimization.We here present the comprehensive
	modeling framework Potters-Wheel (PW) including novel functionalities
	to satisfy these requirements with strong emphasis on the inverse
	problem, i.e. data-based modeling of partially observed and noisy
	systems like signal transduction pathways and metabolic networks.
	PW is designed as a MATLAB toolbox and includes numerous user interfaces.
	Deterministic and stochastic optimization routines are combined by
	fitting in logarithmic parameter space allowing for robust parameter
	calibration. Model investigation includes statistical tests for model-data-compliance,
	model discrimination, identifiability analysis and calculation of
	Hessian- and Monte-Carlo-based parameter confidence limits. A rich
	application programming interface is available for customization
	within own MATLAB code. Within an extensive performance analysis,
	we identified and significantly improved an integrator-optimizer
	pair which decreases the fitting duration for a realistic benchmark
	model by a factor over 3000 compared to MATLAB with optimization
	toolbox.PottersWheel is freely available for academic usage at http://www.PottersWheel.de/.
	The website contains a detailed documentation and introductory videos.
	The program has been intensively used since 2005 on Windows, Linux
	and Macintosh computers and does not require special MATLAB toolboxes.Supplementary
	data are available at Bioinformatics online.},
  doi = {10.1093/bioinformatics/btn350},
  institution = {Freiburg Center for Data Analysis and Modeling, Freiburg University,
	Freiburg, Germany. maiwald@fdm.uni-freiburg.de},
  keywords = {Computer Simulation; Programming Languages; Signal Transduction; Software;
	Systems Biology, methods},
  language = {eng},
  medline-pst = {ppublish},
  pii = {btn350},
  pmid = {18614583},
  url = {http://dx.doi.org/10.1093/bioinformatics/btn350}
}

@ARTICLE{Myers2009,
  author = {Myers, Chris J. and Barker, Nathan and Jones, Kevin and Kuwahara,
	Hiroyuki and Madsen, Curtis and Nguyen, Nam-Phuong D.},
  title = {{iBioSim: a tool for the analysis and design of genetic circuits}},
  journal = {Bioinformatics},
  year = {2009},
  volume = {25},
  pages = {2848--2849},
  number = {21},
  month = {nov},
  abstract = {iBioSim is a tool that supports learning of genetic circuit models,
	efficient abstraction-based analysis of these models and the design
	of synthetic genetic circuits. iBioSim includes project management
	features and a graphical user interface that facilitate the development
	and maintenance of genetic circuit models as well as both experimental
	and simulation data records.iBioSim is available for download for
	Windows, Linux, and MacOS at http://www.async.ece.utah.edu/iBioSim/myers@ece.utah.edu.},
  doi = {10.1093/bioinformatics/btp457},
  institution = {Department of Electrical and Computer Engineering, University of
	Utah, Salt Lake City, Utah, USA. myers@ece.utah.edu},
  keywords = {Computational Biology, methods; Computer Graphics; Gene Expression
	Profiling, methods; Models, Genetic; Software; User-Computer Interface},
  language = {eng},
  medline-pst = {ppublish},
  pii = {btp457},
  pmid = {19628507},
  url = {http://dx.doi.org/10.1093/bioinformatics/btp457}
}

@ARTICLE{SBT_Schmidt2006,
  author = {Schmidt, Henning and Jirstrand, Mats},
  title = {{Systems Biology Toolbox for MATLAB: a computational platform for
	research in systems biology}},
  journal = {Bioinformatics},
  year = {2006},
  volume = {22},
  pages = {514--515},
  number = {4}
}

@ARTICLE{Waltemath2011,
  author = {Waltemath, Dagmar and Adams, Richard and Bergmann, Frank T. and Hucka,
	Michael and Kolpakov, Fedor and Miller, Andrew K. and Moraru, Ion
	I. and Nickerson, David and Sahle, Sven and Snoep, Jacky L. and Le
	Nov\`{e}re, Nicolas},
  title = {{Reproducible computational biology experiments with SED-ML--the Simulation
	Experiment Description Markup Language}},
  journal = {BMC Syst Biol},
  year = {2011},
  volume = {5},
  pages = {198},
  month = dec,
  __markedentry = {[draeger:6]},
  abstract = {The increasing use of computational simulation experiments to inform
	modern biological research creates new challenges to annotate, archive,
	share and reproduce such experiments. The recently published Minimum
	Information About a Simulation Experiment (MIASE) proposes a minimal
	set of information that should be provided to allow the reproduction
	of simulation experiments among users and software tools.In this
	article, we present the Simulation Experiment Description Markup
	Language (SED-ML). SED-ML encodes in a computer-readable exchange
	format the information required by MIASE to enable reproduction of
	simulation experiments. It has been developed as a community project
	and it is defined in a detailed technical specification and additionally
	provides an XML schema. The version of SED-ML described in this publication
	is Level 1 Version 1. It covers the description of the most frequent
	type of simulation experiments in the area, namely time course simulations.
	SED-ML documents specify which models to use in an experiment, modifications
	to apply on the models before using them, which simulation procedures
	to run on each model, what analysis results to output, and how the
	results should be presented. These descriptions are independent of
	the underlying model implementation. SED-ML is a software-independent
	format for encoding the description of simulation experiments; it
	is not specific to particular simulation tools. Here, we demonstrate
	that with the growing software support for SED-ML we can effectively
	exchange executable simulation descriptions.With SED-ML, software
	can exchange simulation experiment descriptions, enabling the validation
	and reuse of simulation experiments in different tools. Authors of
	papers reporting simulation experiments can make their simulation
	protocols available for other scientists to reproduce the results.
	Because SED-ML is agnostic about exact modeling language(s) used,
	experiments covering models from different fields of research can
	be accurately described and combined.},
  doi = {10.1186/1752-0509-5-198},
  institution = { Bioinformatics, Institute of Computer Science, University of Rostock,
	D-18051 Rostock, Germany.},
  language = {eng},
  medline-pst = {epublish},
  pii = {1752-0509-5-198},
  pmid = {22172142},
  url = {http://dx.doi.org/10.1186/1752-0509-5-198}
}

@ARTICLE{Hucka2004,
  author = {Hucka, Michael and Finney, Andrew and Bornstein, Benjamin J. and
	Keating, Sara M. and Shapiro, Bruce E. and Matthews, Joanne and Kovitz,
	Ben L. and Schilstra, Maria J. and Funahashi, Akira and Doyle, John
	C. and Kitano, Hiroaki},
  title = {{Evolving a lingua franca and associated software infrastructure
	for computational systems biology: the Systems Biology Markup Language
	(SBML) project}},
  journal = {Systems Biology, IEE},
  year = {2004},
  volume = {1},
  pages = {41--53},
  number = {1},
  abstract = {Biologists are increasingly recognising that computational modelling
	is crucial for making sense of the vast quantities of complex experimental
	data that are now being collected. The systems biology field needs
	agreed-upon information standards if models are to be shared, evaluated
	and developed cooperatively. Over the last four years, our team has
	been developing the Systems Biology Markup Language (SBML) in collaboration
	with an international community of modellers and software developers.
	SBML has become a de facto standard format for representing formal,
	quantitative and qualitative models at the level of biochemical reactions
	and regulatory networks. In this article, we summarise the current
	and upcoming versions of SBML and our efforts at developing software
	infrastructure for supporting and broadening its use. We also provide
	a brief overview of the many SBML-compatible software tools available
	today.},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1334988}
}

@comment{jabref-meta: selector_publisher:}

@comment{jabref-meta: selector_author:}

@comment{jabref-meta: selector_journal:}

@comment{jabref-meta: selector_keywords:}

